# data_total[data_total$conditionId==4 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Generation"
# check which data of Ours generation is wrong
ours_data_error <- data_total[data_total$conditionId==5 & data_total$userResult==0, ]
# compute the time threshold
data_time_correct <- data_total[data_total$userResult==1, ]
data_time_threshold_correct <- data_total[data_total$totalTime<=30 & data_total$userResult==1, ]
threshold <- nrow(data_time_threshold_correct)/nrow(data_time_correct)
View(data_total)
data <- data_total
# Model1: error ~ ... datasetGroup + paletteName ...
model <- lm(error ~ condition + datasetGroup + condition * datasetGroup, data)
anova(model)
summary(model)
# Model2: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data)
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="shape", ])
data <- data_total
# Model1: error ~ ... datasetGroup + paletteName ...
model <- lm(error ~ condition + datasetGroup + condition * datasetGroup, data)
anova(model)
summary(model)
# Model2: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data)
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="pos", ])
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="num", ])
anova(model)
summary(model)
data <- data_total
# #Statistical Test Results: mu~95% CI, W, p-value, d.
df_stat_output <- stat_table(data)
# Load the magic package
source('analysis.R')
library(forcats)
library(tidyverse)
file_study_folder <- "./data/pilot/"
data <- data_total
# #Statistical Test Results: mu~95% CI, W, p-value, d.
df_stat_output <- stat_table(data,"C3-Palette Generation")
# Get the list of files.
file_path <- paste(file_study_folder, "", sep = "")
filelist <- list.files(path = file_path, pattern = '*coSaliency.*?\\.csv$')
# Compute data_total
data_total <- rbind()
total_time <- c()
for (file in filelist) {
print(file)
# read data
data_temp <- read.csv(paste(file_path, file, sep = ""), header = TRUE) %>%
# Remove duplicated rows with extremely long time
filter(totalTime < 1000)
# Remove another type of duplicated rows, if any
test <- data_temp %>%
group_by(userName, fileId, conditionId, changeMagnitude, changeType) %>%
summarise(count = n())
if(nrow(test) != nrow(data_temp)) {
print("------------------------")
# Print the dataframe if there're duplicated rows.
print(data_temp)
print(test)
data_temp <- data_temp %>%
group_by(userName, fileId, conditionId, changeMagnitude, changeType) %>%
slice(c(n())) %>%
ungroup()
}
xx <- strsplit(file, "-")
group_id <- xx[[1]][1]
# sum the time of each user
total_time <- c(total_time, sum(data_temp$totalTime))
data_temp <- data_temp %>%
mutate(errorTime=ifelse(userResult!=1, totalTime, 0)) %>%
mutate(accuracy=userResult) %>%
mutate(datasetGroup = rep(as.numeric(group_id),times=nrow(data_temp)))
for(i in 1:nrow(data_temp)){
user_result <- as.numeric(unlist(strsplit(as.vector(data_temp[i,]$clickOrder), "-")))
right_result <- as.numeric(unlist(strsplit(as.vector(data_temp[i,]$rightAnswer), "-")))
intersect_elements <- intersect(user_result, right_result)
#print(user_result)
#print(right_result)
#print(intersect_elements)
#print(length(intersect_elements))
data_temp[i,]$accuracy <- length(intersect_elements)/length(right_result)
#print(data_temp[i,]$accuracy)
}
# bind the data to the total data frame
data_total <- rbind(data_total, data_temp)
# check each data: error rate of each condition
group_data <- dplyr::summarise(group_by(data_temp,conditionId, userResult),count=n(), time=sum(totalTime))
group_data_total <- dplyr::summarise(group_by(data_temp,conditionId),count=n(), time=sum(totalTime))
for(i in 1:nrow(group_data_total)){
x <- group_data_total[i,]
x1 <- group_data[group_data$conditionId==x["conditionId"][[1]] & group_data$userResult==0,]
if(nrow(x1)==0){
cat(toString(x["conditionId"][[1]]), " error rate is ", 0, ", time is ",x["time"][[1]],"\n")
}else{
cat(toString(x["conditionId"][[1]]), " error rate is ", x1["count"][[1]]/x["count"][[1]], ", time is ",x1["time"][[1]],"\n")
}
}
data_t <- data_temp[data_temp$conditionId==-1 & data_temp$userResult==0, ]
cat("distractor trials error rate is ", nrow(data_t)/4,"\n")
if(nrow(data_t)/4>0){
print("=============================")
}
data_t <- data_temp[data_temp$totalTime==60, ]
cat("totalTime==60 rate is ", nrow(data_t)/nrow(data_temp),"\n")
if(nrow(data_t)/nrow(data_temp)>0){
print("=============================")
}
print(nrow(data_temp))
if(nrow(data_temp)!=40){
print("*********************************")
}
}
#write.csv(data_total, paste(file_path, "statics.csv", sep = ""))
cat("\n", "average time is ", toString(mean(total_time)/60), "min\n")
mean_time <- (sum(total_time)-max(total_time)-min(total_time))/(length(total_time)-2)
cat("average time (remove max and min) is ", toString(mean_time/60), "min\n")
cat("max time is ", toString(max(total_time)), "\n")
cat("min time is ", toString(min(total_time)), "\n")
# Uncomment if want to check the trial numbers per participant.
# temp <- data_total %>%
#   group_by(userName) %>%
#   summarise(trials = n()) %>%
#   filter(trials != 30)
# Compute variables like error
data_total <- data_total %>%
mutate(error=ifelse(userResult!=0, 0, 1)) %>%
mutate(datasetId=fileId)
# removing the distractors
data_total <- data_total[data_total$conditionId!=-1, ]
# Prep Plot Consistency
data_total <- data_total %>%
mutate(conditionName = conditionId) %>%
mutate(conditionMagnitude = conditionId)
data_total[data_total$conditionId==0, ]$conditionName <- "Random Assignment"
data_total[data_total$conditionId==1, ]$conditionName <- "Optimized Assignment"
data_total[data_total$conditionId==2, ]$conditionName <- "Alpha Blending"
data_total[data_total$conditionId==3, ]$conditionName <- "C3-Palette Assignment"
data_total[data_total$conditionId==4, ]$conditionName <- "Palettailor"
data_total[data_total$conditionId==5, ]$conditionName <- "C3-Palette Generation"
data_total <- data_total %>%
mutate(condition = fct_relevel(conditionName,
"C3-Palette Generation",
"Palettailor", "C3-Palette Assignment",
"Alpha Blending", "Optimized Assignment", "Random Assignment"))
condition_names <- c("Random Assignment", "Optimized Assignment", "Alpha Blending", "C3-Palette Assignment", "Palettailor", "C3-Palette Generation")
# 0 is small, 1 is medium, 2 is large
for(i in 1:5){
for(j in 0:2){
data_total[data_total$conditionId==(i-1) & data_total$changeMagnitude==j, ]$conditionMagnitude <- paste(condition_names[i], j, sep = "-")
}
}
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Random 10"
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Random 10"
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Random 10"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Random 20"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Random 20"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Random 20"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Ours 10"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Ours 10"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Ours 10"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Ours 20"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Ours 20"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Ours 20"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Generation"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Generation"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Generation"
# check which data of Ours generation is wrong
ours_data_error <- data_total[data_total$conditionId==5 & data_total$userResult==0, ]
# compute the time threshold
data_time_correct <- data_total[data_total$userResult==1, ]
data_time_threshold_correct <- data_total[data_total$totalTime<=30 & data_total$userResult==1, ]
threshold <- nrow(data_time_threshold_correct)/nrow(data_time_correct)
data <- data_total
# Model1: error ~ ... datasetGroup + paletteName ...
model <- lm(error ~ condition + datasetGroup + condition * datasetGroup, data)
anova(model)
summary(model)
# Model2: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data)
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="pos", ])
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="num", ])
anova(model)
summary(model)
data <- data_total
# #Statistical Test Results: mu~95% CI, W, p-value, d.
df_stat_output <- stat_table(data,"C3-Palette Generation")
data <- data_total
# #Statistical Test Results: mu~95% CI, W, p-value, d.
df_stat_output <- stat_table(data,"C3-Palette Generation")
# Get the list of files.
file_path <- paste(file_study_folder, "", sep = "")
filelist <- list.files(path = file_path, pattern = '*coSaliency.*?\\.csv$')
# Compute data_total
data_total <- rbind()
total_time <- c()
for (file in filelist) {
print(file)
# read data
data_temp <- read.csv(paste(file_path, file, sep = ""), header = TRUE) %>%
# Remove duplicated rows with extremely long time
filter(totalTime < 1000)
# Remove another type of duplicated rows, if any
test <- data_temp %>%
group_by(userName, fileId, conditionId, changeMagnitude, changeType) %>%
summarise(count = n())
if(nrow(test) != nrow(data_temp)) {
print("------------------------")
# Print the dataframe if there're duplicated rows.
print(data_temp)
print(test)
data_temp <- data_temp %>%
group_by(userName, fileId, conditionId, changeMagnitude, changeType) %>%
slice(c(n())) %>%
ungroup()
}
xx <- strsplit(file, "-")
group_id <- xx[[1]][1]
# sum the time of each user
total_time <- c(total_time, sum(data_temp$totalTime))
data_temp <- data_temp %>%
mutate(errorTime=ifelse(userResult!=1, totalTime, 0)) %>%
mutate(accuracy=userResult) %>%
mutate(datasetGroup = rep(as.numeric(group_id),times=nrow(data_temp)))
for(i in 1:nrow(data_temp)){
user_result <- as.numeric(unlist(strsplit(as.vector(data_temp[i,]$clickOrder), "-")))
right_result <- as.numeric(unlist(strsplit(as.vector(data_temp[i,]$rightAnswer), "-")))
intersect_elements <- intersect(user_result, right_result)
#print(user_result)
#print(right_result)
#print(intersect_elements)
#print(length(intersect_elements))
data_temp[i,]$accuracy <- length(intersect_elements)/length(right_result)
#print(data_temp[i,]$accuracy)
}
# bind the data to the total data frame
data_total <- rbind(data_total, data_temp)
# check each data: error rate of each condition
group_data <- dplyr::summarise(group_by(data_temp,conditionId, userResult),count=n(), time=sum(totalTime))
group_data_total <- dplyr::summarise(group_by(data_temp,conditionId),count=n(), time=sum(totalTime))
for(i in 1:nrow(group_data_total)){
x <- group_data_total[i,]
x1 <- group_data[group_data$conditionId==x["conditionId"][[1]] & group_data$userResult==0,]
if(nrow(x1)==0){
cat(toString(x["conditionId"][[1]]), " error rate is ", 0, ", time is ",x["time"][[1]],"\n")
}else{
cat(toString(x["conditionId"][[1]]), " error rate is ", x1["count"][[1]]/x["count"][[1]], ", time is ",x1["time"][[1]],"\n")
}
}
data_t <- data_temp[data_temp$conditionId==-1 & data_temp$userResult==0, ]
cat("distractor trials error rate is ", nrow(data_t)/4,"\n")
if(nrow(data_t)/4>0){
print("=============================")
}
data_t <- data_temp[data_temp$totalTime==60, ]
cat("totalTime==60 rate is ", nrow(data_t)/nrow(data_temp),"\n")
if(nrow(data_t)/nrow(data_temp)>0){
print("=============================")
}
print(nrow(data_temp))
if(nrow(data_temp)!=40){
print("*********************************")
}
}
#write.csv(data_total, paste(file_path, "statics.csv", sep = ""))
cat("\n", "average time is ", toString(mean(total_time)/60), "min\n")
mean_time <- (sum(total_time)-max(total_time)-min(total_time))/(length(total_time)-2)
cat("average time (remove max and min) is ", toString(mean_time/60), "min\n")
cat("max time is ", toString(max(total_time)), "\n")
cat("min time is ", toString(min(total_time)), "\n")
# Uncomment if want to check the trial numbers per participant.
# temp <- data_total %>%
#   group_by(userName) %>%
#   summarise(trials = n()) %>%
#   filter(trials != 30)
# Compute variables like error
data_total <- data_total %>%
mutate(error=ifelse(userResult!=0, 0, 1)) %>%
mutate(datasetId=fileId)
# removing the distractors
data_total <- data_total[data_total$conditionId!=-1, ]
# Prep Plot Consistency
data_total <- data_total %>%
mutate(conditionName = conditionId) %>%
mutate(conditionMagnitude = conditionId)
data_total[data_total$conditionId==0, ]$conditionName <- "Random Assignment"
data_total[data_total$conditionId==1, ]$conditionName <- "Optimized Assignment"
data_total[data_total$conditionId==2, ]$conditionName <- "Alpha Blending"
data_total[data_total$conditionId==3, ]$conditionName <- "C3-Palette Assignment"
data_total[data_total$conditionId==4, ]$conditionName <- "Palettailor"
data_total[data_total$conditionId==5, ]$conditionName <- "C3-Palette Generation"
data_total <- data_total %>%
mutate(condition = fct_relevel(conditionName,
"C3-Palette Generation",
"Palettailor", "C3-Palette Assignment",
"Alpha Blending", "Optimized Assignment", "Random Assignment"))
condition_names <- c("Random Assignment", "Optimized Assignment", "Alpha Blending", "C3-Palette Assignment", "Palettailor", "C3-Palette Generation")
# 0 is small, 1 is medium, 2 is large
for(i in 1:5){
for(j in 0:2){
data_total[data_total$conditionId==(i-1) & data_total$changeMagnitude==j, ]$conditionMagnitude <- paste(condition_names[i], j, sep = "-")
}
}
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Random 10"
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Random 10"
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Random 10"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Random 20"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Random 20"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Random 20"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Ours 10"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Ours 10"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Ours 10"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Ours 20"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Ours 20"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Ours 20"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Generation"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Generation"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Generation"
# check which data of Ours generation is wrong
ours_data_error <- data_total[data_total$conditionId==5 & data_total$userResult==0, ]
# compute the time threshold
data_time_correct <- data_total[data_total$userResult==1, ]
data_time_threshold_correct <- data_total[data_total$totalTime<=30 & data_total$userResult==1, ]
threshold <- nrow(data_time_threshold_correct)/nrow(data_time_correct)
data <- data_total
# Model1: error ~ ... datasetGroup + paletteName ...
model <- lm(error ~ condition + datasetGroup + condition * datasetGroup, data)
anova(model)
summary(model)
# Model2: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data)
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="pos", ])
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="num", ])
anova(model)
summary(model)
data <- data_total
# #Statistical Test Results: mu~95% CI, W, p-value, d.
df_stat_output <- stat_table(data,"C3-Palette Generation")
# Get the list of files.
file_path <- paste(file_study_folder, "", sep = "")
filelist <- list.files(path = file_path, pattern = '*coSaliency.*?\\.csv$')
# Compute data_total
data_total <- rbind()
total_time <- c()
for (file in filelist) {
print(file)
# read data
data_temp <- read.csv(paste(file_path, file, sep = ""), header = TRUE) %>%
# Remove duplicated rows with extremely long time
filter(totalTime < 1000)
# Remove another type of duplicated rows, if any
test <- data_temp %>%
group_by(userName, fileId, conditionId, changeMagnitude, changeType) %>%
summarise(count = n())
if(nrow(test) != nrow(data_temp)) {
print("------------------------")
# Print the dataframe if there're duplicated rows.
print(data_temp)
print(test)
data_temp <- data_temp %>%
group_by(userName, fileId, conditionId, changeMagnitude, changeType) %>%
slice(c(n())) %>%
ungroup()
}
xx <- strsplit(file, "-")
group_id <- xx[[1]][1]
# sum the time of each user
total_time <- c(total_time, sum(data_temp$totalTime))
data_temp <- data_temp %>%
mutate(errorTime=ifelse(userResult!=1, totalTime, 0)) %>%
mutate(accuracy=userResult) %>%
mutate(datasetGroup = rep(as.numeric(group_id),times=nrow(data_temp)))
for(i in 1:nrow(data_temp)){
user_result <- as.numeric(unlist(strsplit(as.vector(data_temp[i,]$clickOrder), "-")))
right_result <- as.numeric(unlist(strsplit(as.vector(data_temp[i,]$rightAnswer), "-")))
intersect_elements <- intersect(user_result, right_result)
#print(user_result)
#print(right_result)
#print(intersect_elements)
#print(length(intersect_elements))
data_temp[i,]$accuracy <- length(intersect_elements)/length(right_result)
#print(data_temp[i,]$accuracy)
}
# bind the data to the total data frame
data_total <- rbind(data_total, data_temp)
# check each data: error rate of each condition
group_data <- dplyr::summarise(group_by(data_temp,conditionId, userResult),count=n(), time=sum(totalTime))
group_data_total <- dplyr::summarise(group_by(data_temp,conditionId),count=n(), time=sum(totalTime))
for(i in 1:nrow(group_data_total)){
x <- group_data_total[i,]
x1 <- group_data[group_data$conditionId==x["conditionId"][[1]] & group_data$userResult==0,]
if(nrow(x1)==0){
cat(toString(x["conditionId"][[1]]), " error rate is ", 0, ", time is ",x["time"][[1]],"\n")
}else{
cat(toString(x["conditionId"][[1]]), " error rate is ", x1["count"][[1]]/x["count"][[1]], ", time is ",x1["time"][[1]],"\n")
}
}
data_t <- data_temp[data_temp$conditionId==-1 & data_temp$userResult==0, ]
cat("distractor trials error rate is ", nrow(data_t)/4,"\n")
if(nrow(data_t)/4>0){
print("=============================")
}
data_t <- data_temp[data_temp$totalTime==60, ]
cat("totalTime==60 rate is ", nrow(data_t)/nrow(data_temp),"\n")
if(nrow(data_t)/nrow(data_temp)>0){
print("=============================")
}
print(nrow(data_temp))
if(nrow(data_temp)!=40){
print("*********************************")
}
}
#write.csv(data_total, paste(file_path, "statics.csv", sep = ""))
cat("\n", "average time is ", toString(mean(total_time)/60), "min\n")
mean_time <- (sum(total_time)-max(total_time)-min(total_time))/(length(total_time)-2)
cat("average time (remove max and min) is ", toString(mean_time/60), "min\n")
cat("max time is ", toString(max(total_time)), "\n")
cat("min time is ", toString(min(total_time)), "\n")
# Uncomment if want to check the trial numbers per participant.
# temp <- data_total %>%
#   group_by(userName) %>%
#   summarise(trials = n()) %>%
#   filter(trials != 30)
# Compute variables like error
data_total <- data_total %>%
mutate(error=ifelse(userResult!=0, 0, 1)) %>%
mutate(datasetId=fileId)
# removing the distractors
data_total <- data_total[data_total$conditionId!=-1, ]
# Prep Plot Consistency
data_total <- data_total %>%
mutate(conditionName = conditionId) %>%
mutate(conditionMagnitude = conditionId)
data_total[data_total$conditionId==0, ]$conditionName <- "Random Assignment"
data_total[data_total$conditionId==1, ]$conditionName <- "Optimized Assignment"
data_total[data_total$conditionId==2, ]$conditionName <- "Alpha Blending"
data_total[data_total$conditionId==3, ]$conditionName <- "C3-Palette Assignment"
data_total[data_total$conditionId==4, ]$conditionName <- "Palettailor"
data_total[data_total$conditionId==5, ]$conditionName <- "C3-Palette Generation"
data_total <- data_total %>%
mutate(condition = fct_relevel(conditionName,
"C3-Palette Generation",
"Palettailor", "C3-Palette Assignment",
"Alpha Blending", "Optimized Assignment", "Random Assignment"))
condition_names <- c("Random Assignment", "Optimized Assignment", "Alpha Blending", "C3-Palette Assignment", "Palettailor", "C3-Palette Generation")
# 0 is small, 1 is medium, 2 is large
for(i in 1:5){
for(j in 0:2){
data_total[data_total$conditionId==(i-1) & data_total$changeMagnitude==j, ]$conditionMagnitude <- paste(condition_names[i], j, sep = "-")
}
}
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Random 10"
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Random 10"
# data_total[data_total$conditionId==0 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Random 10"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Random 20"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Random 20"
# data_total[data_total$conditionId==1 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Random 20"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Ours 10"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Ours 10"
# data_total[data_total$conditionId==2 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Ours 10"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Ours 20"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Ours 20"
# data_total[data_total$conditionId==3 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Ours 20"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==0, ]$conditionMagnitude <- "0-Generation"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==1, ]$conditionMagnitude <- "1-Generation"
# data_total[data_total$conditionId==4 & data_total$changeMagnitude==2, ]$conditionMagnitude <- "2-Generation"
# check which data of Ours generation is wrong
ours_data_error <- data_total[data_total$conditionId==5 & data_total$userResult==0, ]
# compute the time threshold
data_time_correct <- data_total[data_total$userResult==1, ]
data_time_threshold_correct <- data_total[data_total$totalTime<=30 & data_total$userResult==1, ]
threshold <- nrow(data_time_threshold_correct)/nrow(data_time_correct)
data <- data_total
# Model1: error ~ ... datasetGroup + paletteName ...
model <- lm(error ~ condition + datasetGroup + condition * datasetGroup, data)
anova(model)
summary(model)
# Model2: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data)
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="pos", ])
anova(model)
summary(model)
# Model3: for each change type: error ~ ... condition + magnitude ...
model <- lm(error ~ condition + changeMagnitude + condition * changeMagnitude, data[data$changeType=="num", ])
anova(model)
summary(model)
data <- data_total
# #Statistical Test Results: mu~95% CI, W, p-value, d.
df_stat_output <- stat_table(data,"C3-Palette Generation")
